{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },

  "ConnectionStrings": {
    "SchoolDB": "Server=.;Database=SchoolDB;Integrated Security=True"
  },

  "RedisCache": {
    "URL": "localhost:6379" // localhost = 127.0.0.1
  },

  "AllowedHosts": "*",

  "JWT": {
    "SecretKey": "my top secret key", // Secret key length should not be less than 128 bits; in other words, it should have at least 16 characters.
    "TokenValidityInMinutes": 60, // We will set a short lifetime for an access token. So that, even the access token used by a hacker gets access only for a brief period. 
    "RefreshTokenValidityInDays": 7 // The lifetime of a refresh token is usually much longer compared to the lifetime of an access token.
  }

  // After getting new access & refresh tokens with the help of current refresh token. Still with old JWT we can gain access to a protected resource until it expires. Is there any way through which I can invalidate old JWT?
  // See we can't do this and thats why we will set a short lifetime for an access token. So that, even the access token used by a hacker gets access only for a brief period.

  /* And if you feel that something is wrong with the refresh token, then the refresh token can be revoked for a particular user or for all users which means that when the application tries 
  to use it to get a new access token, that request will be rejected, and the user(s) will have to enter credentials once again and authenticate. */
}
